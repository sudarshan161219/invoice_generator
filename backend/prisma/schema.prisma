generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InvoiceStatus {
  pending
  paid
  overdue
}

model Invoice {
  id         Int       @id @default(autoincrement())
  invoiceNumber String? @unique
  userId     Int
  clientId   Int
  clientName String
  amount     Float
  dueDate    DateTime
  paid       Boolean   @default(false)
  support    String?
  description String?
  createdAt  DateTime  @default(now())
  updatedAt DateTime @updatedAt @default(now())

  // Optional: add a status field for better filtering and clarity
  status InvoiceStatus @default(pending)// values can be "pending", "paid", "overdue"

  // Stripe or Razorpay checkout link
  paymentLink   String? 
  // Relations
  client     Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments   Payment[]
  notes      ClientNote[]
  // Indexes
  @@index([userId])
  @@unique([id, userId])
  Attachment Attachment[]
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  password     String?
  profileImage String?   // Optional avatar
  phone        String?   // Optional contact
  companyName  String?   // Optional branding
  role         String?   // Could be "user", "admin"
  passwordResetToken     String?  // nullable
  passwordResetExpires   DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt @default(now())

  // Relations
  accounts        Account[]
  sessions        Session[]
  clients         Client[]
  invoices        Invoice[]
  clientNotes     ClientNote[]
  clientTags      ClientTag[]       // User-defined tags for classification
  clientCategories ClientCategory[] // User-defined categories for classification
  paymentTerms    PaymentTerm[]     // Custom payment terms per user
  currencies      Currency[]        // Custom currency preferences per user
  attachments     Attachment[]

  Subscription Subscription[]

  Notification Notification[]
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NoteType {
  general
  invoiceRelated
}

model ClientNote {
  id        Int       @id @default(autoincrement())
  title     String?
  content   String
  label     Json?   
  noteType  NoteType  @default(general)
  createdAt DateTime  @default(now())

  // Relations
  clientId  Int?
  client    Client?    @relation(fields: [clientId], references: [id])

  userId    Int
  user      User      @relation(fields: [userId], references: [id])

  invoiceId Int?      
  invoice   Invoice?  @relation(fields: [invoiceId], references: [id])

  @@index([clientId])
  @@index([userId])
  @@index([invoiceId])
}

enum PaymentTermsEnum {
  net15
  net30
  net45
  dueOnReceipt
}

enum ClientStatus {
  active
  inactive
  prospect
}

enum ClientCategoryEnum {
  retail
  wholesale
  corporate
}

model Client {
  id              Int           @id @default(autoincrement())
  name            String
  email           String @unique
  phone           String?
  company         String?
  address         String?
  billingAddress  String?
  shippingAddress String?
  website         String?
  status          ClientStatus?       // Enum
  paymentTermId   Int?
  paymentTerm     PaymentTerm?    @relation(fields: [paymentTermId], references: [id])
  currencyId      Int?
  currency        Currency?       @relation(fields: [currencyId], references: [id])
  notes           ClientNote[]
  imageUrl        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  invoices        Invoice[]
  Attachment      Attachment[]

  // Relations for tags and categories
  tags           ClientTag[]     @relation("ClientTagsOnClients")

  // tax id
  taxId           String?
  taxIdType       String?

  // Socials
  socialLinks     Json?

  // Categories (custom + predefined enum)
  categoryId      Int?
  category        ClientCategory? @relation(fields: [categoryId], references: [id])
  categoryType    ClientCategoryEnum? // Enum for quick classification

  @@index([userId])
  @@unique([email, userId])
  @@unique([id, userId])
}


model ClientCategory {
  id        Int       @id @default(autoincrement())
  name      String
  color     String?   // optional, for UI
  isDefault Boolean   @default(false)
  userId    Int       // so each user has their own list
  clients   Client[]

  User User[]
  
}

model ClientTag {
  id        Int       @id @default(autoincrement())
  name      String
  color     String?
  userId    Int
  clients   Client[]  @relation("ClientTagsOnClients")

  User User[]
  @@unique([name, userId])
}

model PaymentTerm {
  id        Int       @id @default(autoincrement())
  name      String    // e.g., "Net 30", "Due on Receipt"
  days      Int?      // For automation/reminders
  userId    Int
  clients   Client[]

  User User[]
}

model Currency {
  id        Int       @id @default(autoincrement())
  code      String    // e.g., "USD"
  symbol    String    // e.g., "$"
  userId    Int
  clients   Client[]

  User User[]
}


model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  paidAt    DateTime @default(now())
  method    String   // e.g., "cash", "bank", "credit"
  note      String?  // optional notes
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId Int
}


model Attachment {
  id          Int       @id @default(autoincrement())
  filename    String
  originalname  String 
  type        String       
  size        Int            
  url         String         
  key         String  
  mimeType    String
  uploadedAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  
  // Relations
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  invoiceId   Int?      // Optional relation to an invoice
  invoice     Invoice?  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  clientId    Int?      // Optional relation to a client
  client      Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([invoiceId])
  @@index([clientId])
}



model Subscription {
  id            Int       @id @default(autoincrement())
  userId        Int       @unique
  plan          String  
  status        String   
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  stripeCustomerId   String?
  razorpayCustomerId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   // "payment_received", "invoice_overdue", "subscription_renewal"
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

